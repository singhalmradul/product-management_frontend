import { ChangeEvent, useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useParams } from 'react-router-dom';

import { QuantityUnit, WeightUnit } from '../../store/types';
import {
	ProductRequestObject,
	toRequestProduct,
} from '../../store/product/product.types';

import { fetchCategoriesStart } from '../../store/category/category.slice';
import {
	addProductStart,
	fetchProductByIdStart,
} from '../../store/product/product.slice';

import {
	selectCategories,
	selectCategoryMap,
} from '../../store/category/category.selector';
import {
	selectProduct,
	selectProductIsLoading,
} from '../../store/product/product.selector';

import TextInput from '../../components/text-input/text-input.component';
import Form from '../../components/form/form.component';
import WithHomeButton from '../../components/with-home-button/with-home-button.component';
import NumberInput from '../../components/number-input/number-input.component';
import TextArea from '../../components/text-area/text-area.component';
import FileInput from '../../components/file-input/file-input.component';
import RadioChoice from '../../components/radio-choice/radio-choice.component';
import WithLabel from '../../components/with-label/with-label.component';
import SelectOption from '../../components/select-option/select-option.component';
import Spinner from '../../components/spinner/spinner.component';

import {
	Checkbox,
	CheckboxContainer,
	CheckboxLabel,
	DimensionsContainer,
} from './save-product.styles';
import Category from '../../store/category/category.types';

const SaveProduct = () => {
	const { id } = useParams();

	const INITIAL_PRODUCT_STATE: ProductRequestObject = {
		code: '',
		name: '',
		weight: null,
		dimensions: {
			length: null,
			width: null,
			height: null,
		},
		categories: [],
		images: [],
		description: null,
		unitPreference: QuantityUnit.KG,
	};

	const dispatch = useDispatch();

	// MARK: Selectors
	const categories = useSelector(selectCategories);
	const categoriesMap = useSelector(selectCategoryMap);
	const isProductLoading = useSelector(selectProductIsLoading);
	const selectedProduct = useSelector(selectProduct);

	// MARK: State
	const [modifyCodeEnabled, setModifyCodeEnabled] = useState(false);

	const [product, setProduct] = useState(
		selectedProduct ? toRequestProduct(selectedProduct) : INITIAL_PRODUCT_STATE
	);

	const [weight, setWeight] = useState({
		value: 0,
		unit: WeightUnit.KG,
	});

	// MARK: Effects
	useEffect(() => {
		if (id) {
			dispatch(fetchProductByIdStart(id));
		}
	}, [id]); // eslint-disable-line react-hooks/exhaustive-deps

	useEffect(() => {
		dispatch(fetchCategoriesStart());
	}, []); // eslint-disable-line react-hooks/exhaustive-deps

	useEffect(() => {
		const multiplier = weight.unit === WeightUnit.KG ? 1000 : 1;
		setProduct((prevProduct) => ({
			...prevProduct,
			weight: weight.value > 0 ? weight.value * multiplier : null,
		}));
	}, [weight]);

	useEffect(() => {
		if (!modifyCodeEnabled) {
			setProduct((prevProduct) => ({
				...prevProduct,
				code: autoGeneratedProductCode(),
			}));
		}
		// eslint-disable-next-line react-hooks/exhaustive-deps
	}, [product.categories, product.name, product.weight, modifyCodeEnabled]);

	// MARK: Event Handlers
	const handleChange = (
		event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
	) => {
		const { name, value } = event.target;
		setProduct((prevProduct) => ({
			...prevProduct,
			[name]: value,
		}));
	};

	const handleCategoryChange = (event: ChangeEvent<HTMLSelectElement>) => {
		const selectedOptions = Array.from(
			event.target.selectedOptions,
			(option) => option.value
		);
		setProduct((prevProduct) => ({
			...prevProduct,
			categories: selectedOptions.map((id) => ({ id })),
		}));
	};

	const handleDimensionsChange = (event: ChangeEvent<HTMLInputElement>) => {
		const { name, value } = event.target;
		let parsedValue: number | null = parseFloat(value);
		if (isNaN(parsedValue) || parsedValue <= 0) {
			parsedValue = null;
		}

		setProduct((prevProduct) => ({
			...prevProduct,
			dimensions: { ...prevProduct.dimensions, [name]: parsedValue },
		}));
	};

	const handleModifyCodeChange = () => {
		setModifyCodeEnabled((prev) => !prev);
	};

	const handleWeightChange = (event: ChangeEvent<HTMLInputElement>) => {
		const { name, value } = event.target;
		setWeight({ ...weight, [name]: value });
	};

	const handleFileChange = (files: File[]) => {
		setProduct({ ...product, images: files });
	};

	const handleSubmit = () => {
		dispatch(addProductStart(product));
	};

	// MARK: Utility Functions
	const autoGeneratedProductCode = () => {
		const parts: string[] = [];
		for (const category of product.categories) {
			const categoryName = categoriesMap.get(category.id);
			if (!categoryName) {
				continue;
			}
			parts.push(categoryName.slice(0, Math.min(3, categoryName.length)));
		}
		if (product.name.length > 0) {
			parts.push(
				product.name
					.split(' ')
					.map((word) => word.slice(0, Math.min(2, word.length)))
					.join('')
			);
		}
		if (product.weight && product.weight > 0) {
			parts.push(product.weight.toString());
		}
		return parts.join('_').toUpperCase();
	};

	// MARK: Render
	if (isProductLoading || (id && !selectedProduct)) {
		return <Spinner />;
	}

	return (
		<WithHomeButton>
			<Form title='Add Product' buttonText='Add' onSubmit={handleSubmit}>
				<TextInput
					label='Code'
					name='code'
					placeholder='code'
					disabled={!modifyCodeEnabled}
					onChange={handleChange}
					onFocus={(e) => e.target.select()}
					value={product.code}
				/>
				<CheckboxContainer>
					<Checkbox
						type='checkbox'
						onChange={handleModifyCodeChange}
						id='modify-code'
					/>
					<CheckboxLabel htmlFor='modify-code'>Modify code</CheckboxLabel>
				</CheckboxContainer>
				<TextInput
					label='Name'
					name='name'
					placeholder='name'
					onChange={handleChange}
					value={product.name}
				/>
				<RadioChoice<WeightUnit>
					choices={[WeightUnit.KG, WeightUnit.G]}
					label='Weight Unit'
					name='unit'
					onChoiceChange={handleWeightChange}
					selectedChoice={weight.unit}
					preChoiceElement={
						<NumberInput
							placeholder='Weight'
							name='value'
							onChange={handleWeightChange}
						/>
					}
				/>
				<WithLabel
					label='Dimensions'
					element={
						<DimensionsContainer>
							<NumberInput
								placeholder='Length'
								name='length'
								onChange={handleDimensionsChange}
							/>
							<NumberInput
								placeholder='Width'
								name='width'
								onChange={handleDimensionsChange}
							/>
							<NumberInput
								placeholder='Height'
								name='height'
								onChange={handleDimensionsChange}
							/>
						</DimensionsContainer>
					}
				/>
				<WithLabel
					label='Category'
					element={
						<SelectOption<Category>
							options={categories}
							values={(category) => category.id}
							display={(category) => category.name}
							name='categories'
							onChange={handleCategoryChange}
							multiple
						/>
					}
				/>
				<RadioChoice<QuantityUnit>
					label='Unit Preference'
					choices={[QuantityUnit.KG, QuantityUnit.PCS, QuantityUnit.BOXES]}
					selectedChoice={product.unitPreference}
					onChoiceChange={handleChange}
					name='unitPreference'
				/>
				<FileInput
					label='Images'
					name='images'
					onFileChange={handleFileChange}
				/>
				<TextArea
					label='Description'
					name='description'
					onChange={handleChange}
				/>
			</Form>
		</WithHomeButton>
	);
};

export default SaveProduct;
