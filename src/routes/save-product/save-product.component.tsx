import { ChangeEvent, useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate, useParams } from 'react-router-dom';

import { QuantityUnit, WeightUnit } from '../../store/types';
import {
	ProductRequestObject,
	toProductRequestObject,
} from '../../store/product/product.types';
import { Category } from '../../store/category/category.types';

import { fetchCategoriesStart } from '../../store/category/category.slice';
import {
	saveProductStart,
	fetchProductByIdStart,
} from '../../store/product/product.slice';

import {
	selectCategories,
	selectCategoryMap,
} from '../../store/category/category.selector';
import {
	selectProduct,
	selectProductIsLoading,
} from '../../store/product/product.selector';

import TextInput from '../../components/text-input/text-input.component';
import Form from '../../components/form/form.component';
import NumberInput from '../../components/number-input/number-input.component';
import TextArea from '../../components/text-area/text-area.component';
import FileInput from '../../components/file-input/file-input.component';
import RadioChoice from '../../components/radio-choice/radio-choice.component';
import WithLabel from '../../components/with-label/with-label.component';
import SelectOption from '../../components/select-option/select-option.component';
import Spinner from '../../components/spinner/spinner.component';

import {
	Checkbox,
	CheckboxContainer,
	CheckboxLabel,
	DimensionsContainer,
} from './save-product.styles';

const SaveProduct = () => {
	const { id } = useParams();
	const dispatch = useDispatch();
	const navigate = useNavigate();

	const INITIAL_PRODUCT_STATE: ProductRequestObject = {
		code: '',
		name: '',
		weight: null,
		dimensions: {
			length: null,
			width: null,
			height: null,
		},
		categories: [],
		images: [],
		newImages: [],
		description: null,
		unitPreference: QuantityUnit.KG,
	};

	// MARK: Selectors
	const categories = useSelector(selectCategories);
	const categoriesMap = useSelector(selectCategoryMap);
	const isProductLoading = useSelector(selectProductIsLoading);
	const selectedProduct = useSelector(selectProduct);

	// MARK: State
	const [autoGenerateCode, setAutoGenerateCode] = useState(!id);

	const [product, setProduct] = useState(
		id && selectedProduct
			? toProductRequestObject(selectedProduct)
			: INITIAL_PRODUCT_STATE
	);

	const [weight, setWeight] = useState({
		value:
			product.weight && product.weight >= 1000
				? product.weight / 1000
				: product.weight,
		unit:
			product.weight && product.weight >= 1000 ? WeightUnit.KG : WeightUnit.G,
	});

	const [saving, setSaving] = useState(false);

	// MARK: Effects
	useEffect(() => {
		dispatch(fetchCategoriesStart());
	}, []); // eslint-disable-line react-hooks/exhaustive-deps

	useEffect(() => {
		if (id) {
			if (saving && selectedProduct) {
				window.confirm('product saved!, would you like to view it?')
					? navigate(`/products/${id}`)
					: navigate('/');
			} else {
				dispatch(fetchProductByIdStart(id));
			}
		}
	}, [id, selectedProduct, saving]); // eslint-disable-line react-hooks/exhaustive-deps

	useEffect(() => {
		const multiplier = weight.unit === WeightUnit.KG ? 1000 : 1;
		setProduct((prevProduct) => ({
			...prevProduct,
			weight:
				weight.value && weight.value > 0 ? weight.value * multiplier : null,
		}));
	}, [weight]);

	useEffect(() => {
		if (autoGenerateCode) {
			setProduct((prevProduct) => ({
				...prevProduct,
				code: autoGeneratedProductCode(),
			}));
		}
		// eslint-disable-next-line react-hooks/exhaustive-deps
	}, [product.categories, product.name, product.weight, autoGenerateCode]);

	// MARK: Event Handlers
	const handleChange = (
		event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
	) => {
		const { name, value } = event.target;
		setProduct((prevProduct) => ({
			...prevProduct,
			[name]: value,
		}));
	};

	const handleCategoryChange = (event: ChangeEvent<HTMLSelectElement>) => {
		const selectedOptions = Array.from(
			event.target.selectedOptions,
			(option) => option.value
		);
		setProduct((prevProduct) => ({
			...prevProduct,
			categories: selectedOptions.map((id) => ({ id })),
		}));
	};

	const handleDimensionsChange = (event: ChangeEvent<HTMLInputElement>) => {
		const { name, value } = event.target;
		let parsedValue: number | null = parseFloat(value);
		if (isNaN(parsedValue) || parsedValue <= 0) {
			parsedValue = null;
		}

		setProduct((prevProduct) => ({
			...prevProduct,
			dimensions: { ...prevProduct.dimensions, [name]: parsedValue },
		}));
	};

	const toggleAutoGeneratedCodeChange = () => {
		setAutoGenerateCode((prev) => !prev);
	};

	const handleWeightChange = (event: ChangeEvent<HTMLInputElement>) => {
		const { name, value } = event.target;
		setWeight({ ...weight, [name]: value });
	};

	const handleFileChange = (files: File[]) => {
		setProduct({ ...product, newImages: files });
	};

	const handleSubmit = () => {
		dispatch(saveProductStart({ product, id }));
		setSaving(true);
	};

	const handleRemoveImage = (src: string) => {
		setProduct({
			...product,
			images: product.images.filter((image) => image !== src),
		});
	};

	// MARK: Utility Functions
	const autoGeneratedProductCode = () => {
		const parts: string[] = [];
		for (const { id } of product.categories) {
			const categoryName = categoriesMap.get(id)?.name;
			if (!categoryName) {
				continue;
			}
			parts.push(categoryName.slice(0, Math.min(3, categoryName.length)));
		}
		if (product.name.length > 0) {
			parts.push(
				product.name
					.split(' ')
					.map((word) => word.slice(0, Math.min(2, word.length)))
					.join('')
			);
		}
		if (product.weight && product.weight > 0) {
			parts.push(product.weight.toString());
		}
		return parts.join('_').toUpperCase();
	};

	// MARK: Render
	if (isProductLoading || (id && !selectedProduct)) {
		return <Spinner />;
	}

	return (
		<Form
			title='Products'
			buttonText='save'
			onSubmit={handleSubmit}
			buttonDisabled={
				!product.code ||
				!product.name ||
				!product.weight ||
				!product.categories.length
			}
		>
			<TextInput
				label='Code'
				name='code'
				placeholder='code'
				disabled={autoGenerateCode}
				onChange={handleChange}
				onFocus={(e) => e.target.select()}
				value={product.code}
			/>
			<CheckboxContainer>
				<Checkbox
					type='checkbox'
					onChange={toggleAutoGeneratedCodeChange}
					id='auto-generate-code'
					checked={autoGenerateCode}
				/>
				<CheckboxLabel htmlFor='auto-generate-code'>
					auto-generate code
				</CheckboxLabel>
			</CheckboxContainer>
			<TextInput
				label='Name'
				name='name'
				placeholder='name'
				onChange={handleChange}
				value={product.name}
			/>
			<RadioChoice<WeightUnit>
				choices={[WeightUnit.KG, WeightUnit.G]}
				label='Weight Unit'
				name='unit'
				onChoiceChange={handleWeightChange}
				selectedChoice={weight.unit}
				preChoiceElement={
					<NumberInput
						placeholder='Weight'
						name='value'
						onChange={handleWeightChange}
						value={weight.value}
					/>
				}
			/>
			<WithLabel
				label='Dimensions'
				element={
					<DimensionsContainer>
						<NumberInput
							placeholder='Length'
							name='length'
							onChange={handleDimensionsChange}
							value={product.dimensions.length}
						/>
						<NumberInput
							placeholder='Width'
							name='width'
							onChange={handleDimensionsChange}
							value={product.dimensions.width}
						/>
						<NumberInput
							placeholder='Height'
							name='height'
							onChange={handleDimensionsChange}
							value={product.dimensions.height}
						/>
					</DimensionsContainer>
				}
			/>
			<WithLabel
				label='Category'
				element={
					<SelectOption<Category>
						options={categories}
						getValue={({ id }) => id}
						display={({ name }) => name}
						name='categories'
						onChange={handleCategoryChange}
						selectedValues={product.categories.map(({ id }) => id)}
						multiple
					/>
				}
			/>
			<RadioChoice<QuantityUnit>
				label='Unit Preference'
				choices={[QuantityUnit.KG, QuantityUnit.PCS, QuantityUnit.BOXES]}
				selectedChoice={product.unitPreference}
				onChoiceChange={handleChange}
				name='unitPreference'
			/>
			<FileInput
				label='add images'
				name='images'
				onFilesChange={handleFileChange}
				onFileRemove={handleRemoveImage}
				initialPreview={product.images}
			/>
			<TextArea
				label='Description'
				name='description'
				onChange={handleChange}
				value={product.description}
			/>
		</Form>
	);
};

export default SaveProduct;
